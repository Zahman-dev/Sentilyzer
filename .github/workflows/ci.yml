name: Sentilyzer CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10'
  DOCKER_IMAGE_PREFIX: ghcr.io/${{ github.repository }}/sentilyzer-

jobs:
  # ------------------------------------------------
  # Job 1: Code Quality (Linting & Formatting)
  # ------------------------------------------------
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dev dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-dev-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-dev-

      - name: Install dev dependencies
        run: pip install -r requirements-dev.txt

      - name: Run Black formatter check
        run: black --check --diff .

      - name: Run Flake8 linter
        run: flake8 .

      - name: Run isort check
        run: isort --check-only --diff .

  # ------------------------------------------------
  # Job 2: Security Scans (Dependencies & Code)
  # ------------------------------------------------
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dev dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-dev-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-dev-
            
      - name: Install all dependencies for scanning
        run: |
          pip install -r requirements-dev.txt
          pip install -r services/common/requirements.txt
          pip install -r services/data_ingestor/requirements.txt
          pip install -r services/sentiment_processor/requirements.txt
          pip install -r services/signals_api/requirements.txt
          pip install -r services/dashboard/requirements.txt
          pip install -r services/twitter_ingestor/requirements.txt

      - name: Scan dependencies with Safety
        run: |
          # Create a combined requirements file for a full scan
          cat services/*/requirements.txt > all_requirements.txt
          safety check -r all_requirements.txt --full-report

      - name: Scan code with Bandit
        run: bandit -r . -c .bandit.yml -ll -ii

  # ------------------------------------------------
  # Job 3: Unit Tests
  # ------------------------------------------------
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache app dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-app-${{ hashFiles('services/**/requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          # Install app dependencies WITHOUT torch for speed
          pip install -r services/common/requirements.txt
          pip install -r services/data_ingestor/requirements.txt
          pip install -r services/signals_api/requirements.txt
          # Mock the ML model dependencies for unit tests
          pip install fakeredis

      - name: Run unit tests
        env:
          PYTHONPATH: ${{ github.workspace }}/services/common/app:${{ github.workspace }}/services/sentiment_processor/app
        run: pytest tests/unit/

  # ------------------------------------------------
  # Job 4: Integration Tests
  # ------------------------------------------------
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint]
    services:
      postgres:
        image: postgres:14
        env: { POSTGRES_USER: test, POSTGRES_PASSWORD: test, POSTGRES_DB: test }
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install all dependencies (including ML)
        run: |
          pip install -r requirements-dev.txt
          pip install -r services/common/requirements.txt
          pip install -r services/data_ingestor/requirements.txt
          pip install -r services/signals_api/requirements.txt
          # For integration tests, we need the full ML stack
          pip install -r services/sentiment_processor/requirements.txt --extra-index-url https://download.pytorch.org/whl/cpu

      - name: Run migrations
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"
          PYTHONPATH: ./
        run: alembic -c services/common/alembic.ini upgrade head

      - name: Run integration tests
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"
          REDIS_URL: "redis://localhost:6379/0"
          PYTHONPATH: ${{ github.workspace }}/services/common/app:${{ github.workspace }}/services/sentiment_processor/app
        run: pytest tests/integration/

  # ------------------------------------------------
  # Job 5: Build Docker Images (if tests pass)
  # ------------------------------------------------
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, security]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    strategy:
      matrix:
        service: [common, data_ingestor, sentiment_processor, signals_api, dashboard, twitter_ingestor]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE_PREFIX }}${{ matrix.service }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ matrix.service }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ------------------------------------------------
  # Job 6 & 7: Deployments (example stubs)
  # ------------------------------------------------
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop' # Example: only run for 'develop' branch
    environment:
      name: staging
      url: http://staging.example.com
    steps:
      - name: Deploy to Staging environment
        run: echo "Deploying to Staging..."

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main' # Only run for 'main' branch
    environment:
      name: production
      url: http://app.example.com
    steps:
      - name: Deploy to Production environment
        run: echo "Deploying to Production..." 