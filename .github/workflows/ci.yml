name: Sentilyzer CI/CD Pipeline

on:
  push:
    branches: [ main, develop, "fix/**" ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.10.17'
  DOCKER_IMAGE_PREFIX: ghcr.io/${{ github.repository }}/sentilyzer-
  # UV cache will be handled in individual steps where hashFiles is supported

jobs:
  # ------------------------------------------------
  # Job 1: Code Quality (Linting, Formatting, Security)
  # ------------------------------------------------
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Set up Python with uv
        run: |
          source "$HOME/.cargo/env"
          uv venv --python 3.10.17
          echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ hashFiles('**/pyproject.toml') }}

      - name: Install dependencies
        run: |
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run Ruff Formatter Check
        run: |
          source .venv/bin/activate
          ruff format --check .

      - name: Run Ruff Linter
        run: |
          source .venv/bin/activate
          ruff check --output-format=github .

      - name: Run Bandit Security Scan
        run: |
          source .venv/bin/activate
          bandit -c pyproject.toml -r services

  # ------------------------------------------------
  # Job 2: Unit & Integration Tests
  # ------------------------------------------------
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [quality]
    services:
      postgres:
        image: postgres:14
        env: { POSTGRES_USER: test, POSTGRES_PASSWORD: test, POSTGRES_DB: test }
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports: ["6379:6379"]
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Set up Python with uv
        run: |
          source "$HOME/.cargo/env"
          uv venv --python 3.10.17
          echo "VIRTUAL_ENV=.venv" >> $GITHUB_ENV

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ hashFiles('**/pyproject.toml') }}

      - name: Install dependencies with Torch CPU
        run: |
          source .venv/bin/activate
          uv pip install -e ".[dev]" --extra-index-url https://download.pytorch.org/whl/cpu

      - name: Run migrations
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"
        run: |
          source .venv/bin/activate
          alembic -c services/common/alembic.ini upgrade head

      - name: Run tests with coverage
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"
          REDIS_URL: "redis://localhost:6379/0"
        run: |
          source .venv/bin/activate
          pytest --cov=services --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ vars.CODECOV_TOKEN }}
        continue-on-error: true

  # ------------------------------------------------
  # Job 3: Build Docker Images
  # ------------------------------------------------
  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    strategy:
      matrix:
        service: [common, data_ingestor, sentiment_processor, signals_api, dashboard, twitter_ingestor]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE_PREFIX }}${{ matrix.service }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ------------------------------------------------
  # Job 4 & 5: Deployments
  # ------------------------------------------------
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Deploy to Staging environment
        run: echo "Deploying to Staging..."

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to Production environment
        run: echo "Deploying to Production..."
