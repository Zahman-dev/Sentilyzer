services:
  postgres:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-sentilizer_db}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-sentilizer_db}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  migration:
    build:
      context: .
      dockerfile: ./services/common/Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-sentilizer_db}
      - POSTGRES_HOST=postgres
    depends_on:
      postgres:
        condition: service_healthy

  signals_api:
    build:
      context: .
      dockerfile: ./services/signals_api/Dockerfile
    ports:
      - "127.0.0.1:8080:8000"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-sentilizer_db}
      - POSTGRES_HOST=postgres
    depends_on:
      migration:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy

  twitter_ingestor:
    build:
      context: .
      dockerfile: ./services/twitter_ingestor/Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-sentilizer_db}
      - POSTGRES_HOST=postgres
    depends_on:
      migration:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy

  celery_worker:
    build:
      context: .
      dockerfile: ./services/sentiment_processor/Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-sentilizer_db}
      - POSTGRES_HOST=postgres
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  celery_beat:
    build:
      context: .
      dockerfile: ./services/data_ingestor/Dockerfile
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-sentilizer_db}
      - POSTGRES_HOST=postgres
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  dashboard:
    build:
      context: .
      dockerfile: ./services/dashboard/Dockerfile
    ports:
      - "127.0.0.1:8501:8501"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-sentilizer_db}
      - POSTGRES_HOST=postgres
    depends_on:
      migration:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data: